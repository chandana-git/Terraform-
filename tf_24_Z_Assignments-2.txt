Using Join and Count to Create Multiple S3 Buckets

Find three files as below:-

main.tf :-
---------
provider "aws" {
  region = "${var.aws_region}"
}

resource "random_id" "tf_bucket_id" {
  byte_length = 2
}

resource "aws_s3_bucket" "tf_code" {
    bucket        = "${var.project_name}-${random_id.tf_bucket_id.dec}"
    acl           = "private"

    force_destroy =  true

    tags {
      Name = "tf_bucket"
    }
}


variables.tf:-
--------------
variable "aws_region" {
  default = "us-east-1"
}

variable "project_name" {
  default = "la-terraform"
}


outputs.tf:-
-------------
output "bucketname" {
  value = "${aws_s3_bucket.tf_code.id}"
}



Update the Variables File:-
Edit variables.tf.
Add a new variable number_of_instances.
Set the the default to 2.

Update the Main File:-
Update random_id and add a count.
Set the value count to use the number_of_instances variable.
Update aws_s3_bucket and add a count.
Update random_id.tf_bucket_id.dec so it iterates through the count. Update the Name tag so that tf_bucket is appended with the count index plus one.

Update the Outputs File:-
Update the bucketname output value to use the join function so that it returns a comma delimited list of bucket names.

Deploy the Infrastructure:-
Initialize Terraform.
Validate the files.
Deploy the S3 buckets.
=================================================================================

nano main.tf
------------------
provider "aws" {
  region = "${var.aws_region}"
  access_key = "ACCESS_KEY_HERE"
  secret_key = "SECRET_KEY_HERE"
}

resource "random_id" "tf_bucket_id" {
  count = "${var.number_of_instances}"
  byte_length = 2
}

resource "aws_s3_bucket" "tf_code" {
  count = "${var.number_of_instances}"
  bucket = "${var.project_name}-${random_id.tf_bucket_id.*.dec[count.index]}"
  acl    = "private"

  force_destroy = true

  tags = {
    name = "tf_bucket${count.index+1}"
  }
}
--------------------------------------------------------
nano variables.tf
--------------------------------------------

variable "aws_region" {
  default = "us-east-1"
}

variable "project_name" {
  default = "la-terraform"
}

variable "number_of_instances" {
default = "2"
}

----------------------------------------------
nano output.tf
---------------------------------------

output "bucketname" {
  value = "${join(",",aws_s3_bucket.tf_code.*.id)}"
}

terraform init
terraform plan
terraform apply
terraform destroy

==============================
[centos@ip-10-0-1-83 tf]$ terraform init

Initializing the backend...

Initializing provider plugins...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.aws: version = "~> 2.67"
* provider.random: version = "~> 2.2"


Warning: Interpolation-only expressions are deprecated

  on main.tf line 4, in provider "aws":
   4:   region = "${var.aws_region}"

Terraform 0.11 and earlier required all non-constant expressions to be
provided via interpolation syntax, but this pattern is now deprecated. To
silence this warning, remove the "${ sequence from the start and the }"
sequence from the end of this expression, leaving just the inner expression.

Template interpolation syntax is still used to construct strings from
expressions when the template includes multiple interpolation sequences or a
mixture of literal strings and interpolations. This deprecation applies only
to templates that consist entirely of a single interpolation sequence.

(and 2 more similar warnings elsewhere)

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
[centos@ip-10-0-1-83 tf]$ terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.tf_code[0] will be created
  + resource "aws_s3_bucket" "tf_code" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = (known after apply)
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "name" = "tf_bucket1"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_s3_bucket.tf_code[1] will be created
  + resource "aws_s3_bucket" "tf_code" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = (known after apply)
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "name" = "tf_bucket2"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # random_id.tf_bucket_id[0] will be created
  + resource "random_id" "tf_bucket_id" {
      + b64         = (known after apply)
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 2
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # random_id.tf_bucket_id[1] will be created
  + resource "random_id" "tf_bucket_id" {
      + b64         = (known after apply)
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 2
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

Plan: 4 to add, 0 to change, 0 to destroy.


Warning: Interpolation-only expressions are deprecated

  on main.tf line 4, in provider "aws":
   4:   region = "${var.aws_region}"

Terraform 0.11 and earlier required all non-constant expressions to be
provided via interpolation syntax, but this pattern is now deprecated. To
silence this warning, remove the "${ sequence from the start and the }"
sequence from the end of this expression, leaving just the inner expression.

Template interpolation syntax is still used to construct strings from
expressions when the template includes multiple interpolation sequences or a
mixture of literal strings and interpolations. This deprecation applies only
to templates that consist entirely of a single interpolation sequence.

(and 2 more similar warnings elsewhere)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

random_id.tf_bucket_id[0]: Creating...
random_id.tf_bucket_id[1]: Creating...
random_id.tf_bucket_id[0]: Creation complete after 0s [id=n0Y]
random_id.tf_bucket_id[1]: Creation complete after 0s [id=CIc]
aws_s3_bucket.tf_code[0]: Creating...
aws_s3_bucket.tf_code[1]: Creating...
aws_s3_bucket.tf_code[0]: Creation complete after 2s [id=la-terraform-40774]
aws_s3_bucket.tf_code[1]: Creation complete after 2s [id=la-terraform-2183]

Apply complete! Resources: 4 added, 0 changed, 0 destroyed.

Outputs:

bucketname = la-terraform-40774,la-terraform-2183
[centos@ip-10-0-1-83 tf]$ terraform destroy
random_id.tf_bucket_id[1]: Refreshing state... [id=CIc]
random_id.tf_bucket_id[0]: Refreshing state... [id=n0Y]
aws_s3_bucket.tf_code[0]: Refreshing state... [id=la-terraform-40774]
aws_s3_bucket.tf_code[1]: Refreshing state... [id=la-terraform-2183]

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_s3_bucket.tf_code[0] will be destroyed
  - resource "aws_s3_bucket" "tf_code" {
      - acl                         = "private" -> null
      - arn                         = "arn:aws:s3:::la-terraform-40774" -> null
      - bucket                      = "la-terraform-40774" -> null
      - bucket_domain_name          = "la-terraform-40774.s3.amazonaws.com" -> null
      - bucket_regional_domain_name = "la-terraform-40774.s3.amazonaws.com" -> null
      - force_destroy               = true -> null
      - hosted_zone_id              = "Z3AQBSTGFYJSTF" -> null
      - id                          = "la-terraform-40774" -> null
      - region                      = "us-east-1" -> null
      - request_payer               = "BucketOwner" -> null
      - tags                        = {
          - "name" = "tf_bucket1"
        } -> null

      - versioning {
          - enabled    = false -> null
          - mfa_delete = false -> null
        }
    }

  # aws_s3_bucket.tf_code[1] will be destroyed
  - resource "aws_s3_bucket" "tf_code" {
      - acl                         = "private" -> null
      - arn                         = "arn:aws:s3:::la-terraform-2183" -> null
      - bucket                      = "la-terraform-2183" -> null
      - bucket_domain_name          = "la-terraform-2183.s3.amazonaws.com" -> null
      - bucket_regional_domain_name = "la-terraform-2183.s3.amazonaws.com" -> null
      - force_destroy               = true -> null
      - hosted_zone_id              = "Z3AQBSTGFYJSTF" -> null
      - id                          = "la-terraform-2183" -> null
      - region                      = "us-east-1" -> null
      - request_payer               = "BucketOwner" -> null
      - tags                        = {
          - "name" = "tf_bucket2"
        } -> null

      - versioning {
          - enabled    = false -> null
          - mfa_delete = false -> null
        }
    }

  # random_id.tf_bucket_id[0] will be destroyed
  - resource "random_id" "tf_bucket_id" {
      - b64         = "n0Y" -> null
      - b64_std     = "n0Y=" -> null
      - b64_url     = "n0Y" -> null
      - byte_length = 2 -> null
      - dec         = "40774" -> null
      - hex         = "9f46" -> null
      - id          = "n0Y" -> null
    }

  # random_id.tf_bucket_id[1] will be destroyed
  - resource "random_id" "tf_bucket_id" {
      - b64         = "CIc" -> null
      - b64_std     = "CIc=" -> null
      - b64_url     = "CIc" -> null
      - byte_length = 2 -> null
      - dec         = "2183" -> null
      - hex         = "0887" -> null
      - id          = "CIc" -> null
    }

Plan: 0 to add, 0 to change, 4 to destroy.


Warning: Interpolation-only expressions are deprecated

  on main.tf line 4, in provider "aws":
   4:   region = "${var.aws_region}"

Terraform 0.11 and earlier required all non-constant expressions to be
provided via interpolation syntax, but this pattern is now deprecated. To
silence this warning, remove the "${ sequence from the start and the }"
sequence from the end of this expression, leaving just the inner expression.

Template interpolation syntax is still used to construct strings from
expressions when the template includes multiple interpolation sequences or a
mixture of literal strings and interpolations. This deprecation applies only
to templates that consist entirely of a single interpolation sequence.

(and 2 more similar warnings elsewhere)

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_s3_bucket.tf_code[1]: Destroying... [id=la-terraform-2183]
aws_s3_bucket.tf_code[0]: Destroying... [id=la-terraform-40774]
aws_s3_bucket.tf_code[0]: Destruction complete after 1s
aws_s3_bucket.tf_code[1]: Destruction complete after 1s
random_id.tf_bucket_id[1]: Destroying... [id=CIc]
random_id.tf_bucket_id[1]: Destruction complete after 0s
random_id.tf_bucket_id[0]: Destroying... [id=n0Y]
random_id.tf_bucket_id[0]: Destruction complete after 0s

Destroy complete! Resources: 4 destroyed.

