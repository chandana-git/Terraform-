#Add a new variable called env. Set a description to “env: dev or prod”.Convert the type from image_name to map.
Change the default to use key/value pairs. Set dev to ghost:latest and prod to ghost:alpine.
Convert container_name to a map. Change the default to use key/value pairs. Set dev to blog_dev and prod to blog_prod.

nano variables.tf

variable "env"{
  description = "env: dev or prod"
}
variable "image_name" {
  type        = "map"
  description = "Image for container."
  default     = {
    dev  = "ghost:latest"
    prod = "ghost:alpine"
  }
}

variable "container_name" {
  type        = "map"
  description = "Name of the container."
  default     = {
    dev  = "blog_dev"
    prod = "blog_prod"
  }
}

variable "ext_port" {
  type        = "map"
  description = "External port for container."
  default     = {
    dev  = "8081"
    prod = "80"
  }
}

nano main.tf

# Download the latest Ghost Image
resource "docker_image" "image_id" {
  name = "${lookup(var.image_name, var.env)}" 
}

# Start the Container
resource "docker_container" "container_id" {
  name  = "${lookup(var.container_name, var.env)}" 
  image = "${docker_image.image_id.latest}"
  ports {
    internal = "2368"
    external = "${lookup(var.ext_port, var.env)}"
  }
}


nano output.tf

#Output the IP Address of the Container
output "ip_address" {
  value       = "${docker_container.container_id.ip_address}"
  description = "The IP for the container."
}

output "container_name" {
  value       = "${docker_container.container_id.name}"
  description = "The name of the container."
}

$ terraform init

Initializing provider plugins...
- Checking for available provider plugins on https://releases.hashicorp.com...
- Downloading plugin for provider "docker" (2.7.0)...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.docker: version = "~> 2.7"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

#creating workspace dev
$ terraform workspace new dev
Created and switched to workspace "dev"!

You're now on a new, empty workspace. Workspaces isolate their state,
so if you run "terraform plan" Terraform will not see any existing state
for this configuration.

$ terraform plan -out=tfdev_plan -var env=dev
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  + docker_container.container_id
      id:               <computed>
      attach:           "false"
      bridge:           <computed>
      command.#:        <computed>
      container_logs:   <computed>
      entrypoint.#:     <computed>
      env.#:            <computed>
      exit_code:        <computed>
      gateway:          <computed>
      hostname:         <computed>
      image:            "${docker_image.image_id.latest}"
      ip_address:       <computed>
      ip_prefix_length: <computed>
      ipc_mode:         <computed>
      labels.#:         <computed>
      log_driver:       "json-file"
      logs:             "false"
      must_run:         "true"
      name:             "blog_dev"
      network_data.#:   <computed>
      ports.#:          "1"
      ports.0.external: "8081"
      ports.0.internal: "2368"
      ports.0.ip:       "0.0.0.0"
      ports.0.protocol: "tcp"
      read_only:        "false"
      restart:          "no"
      rm:               "false"
      shm_size:         <computed>
      start:            "true"

  + docker_image.image_id
      id:               <computed>
      latest:           <computed>
      name:             "ghost:latest"


Plan: 2 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tfdev_plan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfdev_plan"

$ terraform apply "tfdev_plan"
docker_image.image_id: Creating...
  latest: "" => "<computed>"
  name:   "" => "ghost:latest"
docker_image.image_id: Still creating... (10s elapsed)
docker_image.image_id: Still creating... (20s elapsed)
docker_image.image_id: Still creating... (30s elapsed)
docker_image.image_id: Still creating... (40s elapsed)
docker_image.image_id: Creation complete after 43s (ID: sha256:808d192f8076f49e25afe7e9fa1a3663...9dc314e8415b17e1fda0ac683cghost:latest)
docker_container.container_id: Creating...
  attach:           "" => "false"
  bridge:           "" => "<computed>"
  command.#:        "" => "<computed>"
  container_logs:   "" => "<computed>"
  entrypoint.#:     "" => "<computed>"
  env.#:            "" => "<computed>"
  exit_code:        "" => "<computed>"
  gateway:          "" => "<computed>"
  hostname:         "" => "<computed>"
  image:            "" => "sha256:808d192f8076f49e25afe7e9fa1a3663aaadbb9dc314e8415b17e1fda0ac683c"
  ip_address:       "" => "<computed>"
  ip_prefix_length: "" => "<computed>"
  ipc_mode:         "" => "<computed>"
  labels.#:         "" => "<computed>"
  log_driver:       "" => "json-file"
  logs:             "" => "false"
  must_run:         "" => "true"
  name:             "" => "blog_dev"
  network_data.#:   "" => "<computed>"
  ports.#:          "" => "1"
  ports.0.external: "" => "8081"
  ports.0.internal: "" => "2368"
  ports.0.ip:       "" => "0.0.0.0"
  ports.0.protocol: "" => "tcp"
  read_only:        "" => "false"
  restart:          "" => "no"
  rm:               "" => "false"
  shm_size:         "" => "<computed>"
  start:            "" => "true"
docker_container.container_id: Creation complete after 0s (ID: 7a7b4ce6293286e748cf737e13a951a1e06507f12176ae05d705d9fbf652ec14)

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

container_name = blog_dev
ip_address = 172.18.0.2
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS     PORTS                    NAMES
7a7b4ce62932        808d192f8076        "docker-entrypoint.s…"   9 seconds ago       Up 7 seconds     0.0.0.0:8081->2368/tcp   blog_dev
$ docker stop blog_dev
blog_dev
$ docker rm blog_dev
blog_dev
================================================================================================================================
#creating workspace prod

$ terraform workspace new prod
Created and switched to workspace "prod"!

You're now on a new, empty workspace. Workspaces isolate their state,
so if you run "terraform plan" Terraform will not see any existing state
for this configuration.
$ terraform plan -out tfprod_plan -var env=prod
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  + docker_container.container_id
      id:               <computed>
      attach:           "false"
      bridge:           <computed>
      command.#:        <computed>
      container_logs:   <computed>
      entrypoint.#:     <computed>
      env.#:            <computed>
      exit_code:        <computed>
      gateway:          <computed>
      hostname:         <computed>
      image:            "${docker_image.image_id.latest}"
      ip_address:       <computed>
      ip_prefix_length: <computed>
      ipc_mode:         <computed>
      labels.#:         <computed>
      log_driver:       "json-file"
      logs:             "false"
      must_run:         "true"
      name:             "blog_prod"
      network_data.#:   <computed>
      ports.#:          "1"
      ports.0.external: "80"
      ports.0.internal: "2368"
      ports.0.ip:       "0.0.0.0"
      ports.0.protocol: "tcp"
      read_only:        "false"
      restart:          "no"
      rm:               "false"
      shm_size:         <computed>
      start:            "true"

  + docker_image.image_id
      id:               <computed>
      latest:           <computed>
      name:             "ghost:alpine"


Plan: 2 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tfprod_plan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfprod_plan"

$ terraform apply "tfprod_plan"
docker_image.image_id: Creating...
  latest: "" => "<computed>"
  name:   "" => "ghost:alpine"
docker_image.image_id: Still creating... (10s elapsed)
docker_image.image_id: Creation complete after 18s (ID: sha256:efff227b432c56c211f158921448d6dc...1b6d1da98ead96416012844e9dghost:alpine)
docker_container.container_id: Creating...
  attach:           "" => "false"
  bridge:           "" => "<computed>"
  command.#:        "" => "<computed>"
  container_logs:   "" => "<computed>"
  entrypoint.#:     "" => "<computed>"
  env.#:            "" => "<computed>"
  exit_code:        "" => "<computed>"
  gateway:          "" => "<computed>"
  hostname:         "" => "<computed>"
  image:            "" => "sha256:efff227b432c56c211f158921448d6dcbd89f41b6d1da98ead96416012844e9d"
  ip_address:       "" => "<computed>"
  ip_prefix_length: "" => "<computed>"
  ipc_mode:         "" => "<computed>"
  labels.#:         "" => "<computed>"
  log_driver:       "" => "json-file"
  logs:             "" => "false"
  must_run:         "" => "true"
  name:             "" => "blog_prod"
  network_data.#:   "" => "<computed>"
  ports.#:          "" => "1"
  ports.0.external: "" => "80"
  ports.0.internal: "" => "2368"
  ports.0.ip:       "" => "0.0.0.0"
  ports.0.protocol: "" => "tcp"
  read_only:        "" => "false"
  restart:          "" => "no"
  rm:               "" => "false"
  shm_size:         "" => "<computed>"
  start:            "" => "true"
docker_container.container_id: Creation complete after 1s (ID: e370ea99d98a4033389a4fc9877a2e06e83166b5e2f031ce80495895bcef3e60)

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

container_name = blog_prod
ip_address = 172.18.0.2
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS     PORTS                  NAMES
e370ea99d98a        efff227b432c        "docker-entrypoint.s…"   6 seconds ago       Up 5 seconds     0.0.0.0:80->2368/tcp   blog_prod
$ terraform workspace show
prod

cmds
terraform workspace new prod
Plan the prod deployment:

terraform plan -out=tfprod_plan -var env=prod
Apply the prod deployment:

terraform apply tfprod_plan
Select the default workspace:

terraform workspace select default
Find what workspace we are using:

terraform workspace show
Select the dev workspace:

terraform workspace select dev
Destroy the dev deployment:

terraform destroy -var env=dev
Select the prod workspace:

terraform workspace select prod
Destroy the prod deployment:

terraform destroy -var env=prod