Create a file called main.tf.
Create a docker image resource and call it nginx_image.
Set the name of the image to nginx:latest.
Save and exit the file.

Initialize Terraform.
Plan the deploy and output a terraform plan called tf_image_plan.
Apply the plan using tf_image_plan.
=================================================================================
Using Docker Infra(Swarm mode)
$ docker swarm init
Swarm initialized: current node (hc3t1zmutl9izuahd7t0l7luz) is now a manager.

$ docker swarm join --token SWMTKN-1-1d8rochv30xi80auk5whwltw5a3qcxcogoste5ugw5keodyg7l-47cf9c7rj3xgqo9glrw2w8nqr 172.17.0.34:2377
This node joined a swarm as a worker.

$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
hc3t1zmutl9izuahd7t0l7luz *   host01              Ready               Active              Leader          18.09.7
3chx0ldiatns2ganp3ffpcx2l     host02              Ready               Active          18.09.7

sudo curl -O https://releases.hashicorp.com/terraform/0.11.13/terraform_0.11.13_linux_amd64.zip
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 20.1M  100 20.1M    0     0  37.9M      0 --:--:-- --:--:-- --:--:-- 38.0M

$ apt install -y unzip

$ unzip terraform_0.11.13_linux_amd64.zip -d /usr/local/bin/
Archive:  terraform_0.11.13_linux_amd64.zip
  inflating: /usr/local/bin/terraform

$ terraform version
Terraform v0.11.13
===================================================================================
nano main.tf

resource "docker_image" "nginx_image"{
name = "nginx:latest"
}

$ terraform init

Initializing provider plugins...
- Checking for available provider plugins on https://releases.hashicorp.com...
- Downloading plugin for provider "docker" (2.7.0)...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.docker: version = "~> 2.7"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

$ terraform plan -out tf_image_plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  + docker_image.nginx_image
      id:     <computed>
      latest: <computed>
      name:   "nginx:latest"


Plan: 1 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tf_image_plan

To perform exactly these actions, run the following command to apply:
    terraform apply "tf_image_plan"

$ terraform apply "tf_image_plan"
docker_image.nginx_image: Creating...
  latest: "" => "<computed>"
  name:   "" => "nginx:latest"
docker_image.nginx_image: Creation complete after 7s (ID: sha256:9beeba249f3ee158d3e495a6ac25c566...8a43ac2a8bfd2bf687a58c06c9nginx:latest)

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

$ docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              9beeba249f3e        2 weeks ago         127MB
redis               latest              857c4ab5f029        10 months ago       98.2MB
weaveworks/scope    1.11.4              a082d48f0b39        10 months ago       78.5MB
ubuntu              latest              3556258649b2        10 months ago       64.2MB
alpine              latest              b7b28af77ffe        10 months ago       5.58MB

#use terraform destroy and pass yes as the input to delete the image