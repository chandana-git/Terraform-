
Create the files:

touch {variables.tf,image.tf,network.tf,main.tf}
Edit variables.tf:

nano variables.tf
variables.tf contents:Encode the password with Base64:
echo 'p4sSWoRd0!' | base64

variable "mysql_root_password" {
  default     = "cDRzU1dvUmQwIQo="
}

variable "container_name" {
  default     = "mysql"
}

variable "mysql_network_name" {
  default     = "mysql_internal_network"
}

variable "mysql_volume_name" {
  default     = "mysql_data"
}

nano images.tf
resource "docker_image" "mysql_image" {
  name = "mysql:5.7"
}

nano networks.tf

resource "docker_network" "private_bridge_network" {
  name     = "${var.mysql_network_name}"
  driver   = "bridge"
  internal = true
}

nano volume.tf

resource "docker_volume" "mysql_data_volume" {
  name     = "${var.mysql_volume_name}"
}

nano main.tf


resource "docker_container" "mysql_container" {
  name  = "${var.container_name}"
  image = "${docker_image.mysql_image.name}"
  env = [
        "MYSQL_ROOT_PASSWORD = ${var.mysql_root_password}"
      ]
  volumes {
    volume_name    = "${docker_volume.mysql_data_volume.name}"
    container_path = "/var/lib/mysql"
  }
  ports {
    internal = "2368"
    external = "80"
  }

  networks_advanced {
    name    = "${docker_network.private_bridge_network.name}"
  }
}

$ terraform init

Initializing provider plugins...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.docker: version = "~> 2.7"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
$ terraform validate
$ terraform plan -out tfplan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

docker_image.image_id: Refreshing state... (ID: sha256:efff227b432c56c211f158921448d6dc...1b6d1da98ead96416012844e9dghost:alpine)
docker_container.container_id: Refreshing state... (ID: e370ea99d98a4033389a4fc9877a2e06e83166b5e2f031ce80495895bcef3e60)

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create
  - destroy

Terraform will perform the following actions:

  - docker_container.container_id

  + docker_container.mysql_container
      id:                                       <computed>
      attach:                                   "false"
      bridge:                                   <computed>
      command.#:                                <computed>
      container_logs:                           <computed>
      entrypoint.#:                             <computed>
      env.#:                                    "1"
      env.569211364:                            "MYSQL_ROOT_PASSWORD = cDRzU1dvUmQwIQo="
      exit_code:                                <computed>
      gateway:                                  <computed>
      hostname:                                 <computed>
      image:                                    "mysql:5.7"
      ip_address:                               <computed>
      ip_prefix_length:                         <computed>
      ipc_mode:                                 <computed>
      labels.#:                                 <computed>
      log_driver:                               "json-file"
      logs:                                     "false"
      must_run:                                 "true"
      name:                                     "mysql"
      network_data.#:                           <computed>
      networks_advanced.#:                      "1"
      networks_advanced.759574863.aliases.#:    "0"
      networks_advanced.759574863.ipv4_address: ""
      networks_advanced.759574863.ipv6_address: ""
      networks_advanced.759574863.name:         "mysql_internal_network"
      ports.#:                                  "1"
      ports.0.external:                         "80"
      ports.0.internal:                         "2368"
      ports.0.ip:                               "0.0.0.0"
      ports.0.protocol:                         "tcp"
      read_only:                                "false"
      restart:                                  "no"
      rm:                                       "false"
      shm_size:                                 <computed>
      start:                                    "true"
      volumes.#:                                "1"
      volumes.2351606827.container_path:        "/var/lib/mysql"
      volumes.2351606827.from_container:        ""
      volumes.2351606827.host_path:             ""
      volumes.2351606827.read_only:             ""
      volumes.2351606827.volume_name:           "mysql_data"

  - docker_image.image_id

  + docker_image.mysql_image
      id:                                       <computed>
      latest:                                   <computed>
      name:                                     "mysql:5.7"

  + docker_network.private_bridge_network
      id:                                       <computed>
      driver:                                   "bridge"
      internal:                                 "true"
      ipam_config.#:                            <computed>
      ipam_driver:                              "default"
      name:                                     "mysql_internal_network"
      options.%:                                <computed>
      scope:                                    <computed>

  + docker_volume.mysql_data_volume
      id:                                       <computed>
      driver:                                   <computed>
      mountpoint:                               <computed>
      name:                                     "mysql_data"


Plan: 4 to add, 0 to change, 2 to destroy.

------------------------------------------------------------------------

This plan was saved to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"

$ terraform apply "tfplan"
docker_container.container_id: Destroying... (ID: e370ea99d98a4033389a4fc9877a2e06e83166b5e2f031ce80495895bcef3e60)
docker_network.private_bridge_network: Creating...
  driver:        "" => "bridge"
  internal:      "" => "true"
  ipam_config.#: "" => "<computed>"
  ipam_driver:   "" => "default"
  name:          "" => "mysql_internal_network"
  options.%:     "" => "<computed>"
  scope:         "" => "<computed>"
docker_image.mysql_image: Creating...
  latest: "" => "<computed>"
  name:   "" => "mysql:5.7"
docker_volume.mysql_data_volume: Creating...
  driver:     "" => "<computed>"
  mountpoint: "" => "<computed>"
  name:       "" => "mysql_data"
docker_volume.mysql_data_volume: Creation complete after 0s (ID: mysql_data)
docker_container.container_id: Destruction complete after 0s
docker_image.image_id: Destroying... (ID: sha256:efff227b432c56c211f158921448d6dc...1b6d1da98ead96416012844e9dghost:alpine)
docker_network.private_bridge_network: Creation complete after 2s (ID: db51392cc8db1dd6f2652b0677713de3f2a84d4ec126fd0ae2175b610b07827b)
docker_image.image_id: Destruction complete after 3s
docker_image.mysql_image: Still creating... (10s elapsed)
docker_image.mysql_image: Creation complete after 12s (ID: sha256:a4fdfd462add8e63749aa08ff0044b13d342a042965f1ec6744586cda10dfce9mysql:5.7)
docker_container.mysql_container: Creating...
  attach:                                   "" => "false"
  bridge:                                   "" => "<computed>"
  command.#:                                "" => "<computed>"
  container_logs:                           "" => "<computed>"
  entrypoint.#:                             "" => "<computed>"
  env.#:                                    "" => "1"
  env.569211364:                            "" => "MYSQL_ROOT_PASSWORD = cDRzU1dvUmQwIQo="
  exit_code:                                "" => "<computed>"
  gateway:                                  "" => "<computed>"
  hostname:                                 "" => "<computed>"
  image:                                    "" => "mysql:5.7"
  ip_address:                               "" => "<computed>"
  ip_prefix_length:                         "" => "<computed>"
  ipc_mode:                                 "" => "<computed>"
  labels.#:                                 "" => "<computed>"
  log_driver:                               "" => "json-file"
  logs:                                     "" => "false"
  must_run:                                 "" => "true"
  name:                                     "" => "mysql"
  network_data.#:                           "" => "<computed>"
  networks_advanced.#:                      "" => "1"
  networks_advanced.759574863.aliases.#:    "" => "0"
  networks_advanced.759574863.ipv4_address: "" => ""
  networks_advanced.759574863.ipv6_address: "" => ""
  networks_advanced.759574863.name:         "" => "mysql_internal_network"
  ports.#:                                  "" => "1"
  ports.0.external:                         "" => "80"
  ports.0.internal:                         "" => "2368"
  ports.0.ip:                               "" => "0.0.0.0"
  ports.0.protocol:                         "" => "tcp"
  read_only:                                "" => "false"
  restart:                                  "" => "no"
  rm:                                       "" => "false"
  shm_size:                                 "" => "<computed>"
  start:                                    "" => "true"
  volumes.#:                                "" => "1"
  volumes.2351606827.container_path:        "" => "/var/lib/mysql"
  volumes.2351606827.from_container:        "" => ""
  volumes.2351606827.host_path:             "" => ""
  volumes.2351606827.read_only:             "" => ""
  volumes.2351606827.volume_name:           "" => "mysql_data"
docker_container.mysql_container: Creation complete after 1s (ID: f2683c78b1a74d44a46c9e797fe6b4a0c6e4d22863cdc01c08838788056f9d99)

Apply complete! Resources: 4 added, 0 changed, 2 destroyed.